#!/bin/bash

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail
set -eo pipefail

echo "Running the cardano node ..."

# Define a few defaults
CARDANO_CONFIG_BASE="/opt/cardano/config"

if [[ -z $CARDANO_NETWORK ]]; then
  CARDANO_NETWORK="mainnet"
fi

if [[ -z $CARDANO_CONFIG ]]; then
  CARDANO_CONFIG="$CARDANO_CONFIG_BASE/$CARDANO_NETWORK-config.json"
fi

if [[ -z $CARDANO_TOPOLOGY ]]; then
  CARDANO_TOPOLOGY="$CARDANO_CONFIG_BASE/$CARDANO_NETWORK-topology.json"
fi

if [[ -z $CARDANO_DATABASE_PATH ]]; then
  CARDANO_DATABASE_PATH="/opt/cardano/data"
fi

if [[ -z $CARDANO_SOCKET_PATH ]]; then
  CARDANO_SOCKET_PATH="/opt/cardano/ipc/node.socket"
fi

if [[ -z $CARDANO_LOG_DIR ]]; then
  CARDANO_LOG_DIR="/opt/cardano/logs"
fi

if [[ -z $CARDANO_BIND_ADDR ]]; then
  CARDANO_BIND_ADDR="0.0.0.0"
fi

if [[ -z $CARDANO_PORT ]]; then
  CARDANO_PORT=3001
fi

if [[ -z $CARDANO_PUBLIC_PORT ]]; then
  CARDANO_PUBLIC_PORT=$CARDANO_PORT
fi

# https://github.com/input-output-hk/cardano-node/blob/master/nix/nixos/cardano-node-service.nix#L401
# https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html
#
# -N4                                 Default to multi-core machine
# -A64m                               Set the allocation area size used by the garbage collector. (default 1m)
# -qg                                 Turn off the parallel GC completely
# -qb                                 Disable load-balancing in the parallel GC
# -c                                  Use a compacting algorithm for collecting the oldest generation
# --disable-delayed-os-memory-return  More accurate memory usage stats in memory usage reporting tools
#
if [[ -z $CARDANO_RTS_OPTS ]]; then
  # CARDANO_RTS_OPTS="-N2 -A16m -qg -qb --disable-delayed-os-memory-return"
  CARDANO_RTS_OPTS="-N -A64m -c"
fi

if [[ -z $CARDANO_BLOCK_PRODUCER ]]; then
  CARDANO_BLOCK_PRODUCER=false
fi

if [[ -z $CARDANO_UPDATE_TOPOLOGY ]]; then
  CARDANO_UPDATE_TOPOLOGY=false
fi

if [[ -z $EKG_HOST ]]; then
  EKG_HOST="127.0.0.1"
fi

if [[ -z $EKG_PORT ]]; then
  EKG_PORT=12788
fi

if [[ -z $EKG_TIMEOUT ]]; then
  EKG_TIMEOUT=3
fi

# For backward compatibility
if [[ -z $CARDANO_MAX_PEERS ]]; then
  CARDANO_MAX_PEERS=$MAX_PEERS
fi

if [[ -z $CARDANO_MAX_PEERS ]]; then
  CARDANO_MAX_PEERS=8
fi

#####################################################################
# True if the given parameter is a valud json string

isJsonValue () {
  if echo "$1" | jq -c "." &> /dev/null; then
    return=true
  else
    return=false
  fi
}

# Process CARDANO_CONFIG as JSON value
isJsonValue "$CARDANO_CONFIG"
if [[ $return == true ]]; then
  TARGET_FILE="/var/cardano/config/$CARDANO_NETWORK-config.json"
  echo "Writing $TARGET_FILE ..."
  mkdir -p `dirname $TARGET_FILE` \
    && echo $CARDANO_CONFIG > $TARGET_FILE \
    && CARDANO_CONFIG=$TARGET_FILE
fi

# Process CARDANO_TOPOLOGY as JSON value
isJsonValue "$CARDANO_TOPOLOGY"
if [[ $return == true ]]; then
  TARGET_FILE="/var/cardano/config/$CARDANO_NETWORK-topology.json"
  echo "Writing $TARGET_FILE ..."
  mkdir -p `dirname $TARGET_FILE` \
    && echo $CARDANO_TOPOLOGY > $TARGET_FILE \
    && CARDANO_TOPOLOGY=$TARGET_FILE
fi

#####################################################################
# Print run environment

printRunEnv () {

  echo "CARDANO_NETWORK=$CARDANO_NETWORK"
  echo "CARDANO_CONFIG=$CARDANO_CONFIG"
  echo "CARDANO_TOPOLOGY=$CARDANO_TOPOLOGY"
  echo "CARDANO_BIND_ADDR=$CARDANO_BIND_ADDR"
  echo "CARDANO_PORT=$CARDANO_PORT"
  echo "CARDANO_DATABASE_PATH=$CARDANO_DATABASE_PATH"
  echo "CARDANO_SOCKET_PATH=$CARDANO_SOCKET_PATH"
  echo "CARDANO_LOG_DIR=$CARDANO_LOG_DIR"
  echo "CARDANO_PUBLIC_IP=$CARDANO_PUBLIC_IP"
  echo "CARDANO_PUBLIC_PORT=$CARDANO_PUBLIC_PORT"
  echo "CARDANO_CUSTOM_PEERS=$CARDANO_CUSTOM_PEERS"
  echo "CARDANO_MAX_PEERS=$CARDANO_MAX_PEERS"
  echo "CARDANO_UPDATE_TOPOLOGY=$CARDANO_UPDATE_TOPOLOGY"
  echo "CARDANO_BLOCK_PRODUCER=$CARDANO_BLOCK_PRODUCER"
  echo "CARDANO_RTS_OPTS=$CARDANO_RTS_OPTS"

  if [[ $CARDANO_BLOCK_PRODUCER == true ]]; then

    if [[ -z $CARDANO_SHELLEY_KES_KEY ]]; then
      CARDANO_SHELLEY_KES_KEY="/var/cardano/config/keys/kes.skey"
    fi

    if [[ -z $CARDANO_SHELLEY_VRF_KEY ]]; then
      CARDANO_SHELLEY_VRF_KEY="/var/cardano/config/keys/vrf.skey"
    fi

    if [[ -z $CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE ]]; then
      CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE="/var/cardano/config/keys/node.cert"
    fi

    echo "CARDANO_SHELLEY_KES_KEY=$CARDANO_SHELLEY_KES_KEY"
    echo "CARDANO_SHELLEY_VRF_KEY=$CARDANO_SHELLEY_VRF_KEY"
    echo "CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=$CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE"
  fi
}

#####################################################################
# Write root env file

writeRootEnv () {

cat << EOF > /usr/local/bin/env
#!/usr/bin/env bash

# Docker run ENV vars
CARDANO_NETWORK="$CARDANO_NETWORK"
CARDANO_CONFIG="$CARDANO_CONFIG"
CARDANO_TOPOLOGY="$CARDANO_TOPOLOGY"
CARDANO_BIND_ADDR="$CARDANO_BIND_ADDR"
CARDANO_PORT=$CARDANO_PORT
CARDANO_DATABASE_PATH="$CARDANO_DATABASE_PATH"
CARDANO_SOCKET_PATH="$CARDANO_SOCKET_PATH"
CARDANO_LOG_DIR="$CARDANO_LOG_DIR"
CARDANO_PUBLIC_IP="$CARDANO_PUBLIC_IP"
CARDANO_PUBLIC_PORT=$CARDANO_PUBLIC_PORT
CARDANO_CUSTOM_PEERS="$CARDANO_CUSTOM_PEERS"
CARDANO_MAX_PEERS=$CARDANO_MAX_PEERS
CARDANO_UPDATE_TOPOLOGY=$CARDANO_UPDATE_TOPOLOGY
CARDANO_BLOCK_PRODUCER=$CARDANO_BLOCK_PRODUCER

# Mapping for topologyUpdater
CNODE_HOSTNAME="$CARDANO_PUBLIC_IP"
CNODE_PORT=$CARDANO_PORT
CUSTOM_PEERS="$CARDANO_CUSTOM_PEERS"
GENESIS_JSON="$CARDANO_CONFIG_BASE/$CARDANO_NETWORK-shelley-genesis.json"
TOPOLOGY="$CARDANO_TOPOLOGY"
LOG_DIR="$CARDANO_LOG_DIR"
EKG_HOST="$EKG_HOST"
EKG_PORT=$EKG_PORT
EKG_TIMEOUT=$EKG_TIMEOUT
MAX_PEERS=$CARDANO_MAX_PEERS

# Mapping for gLiveView
CCLI="cardano-cli"
CNODE_PORT=$CARDANO_PORT
CONFIG="$CARDANO_CONFIG"
TOPOLOGY="$CARDANO_TOPOLOGY"
SOCKET="$CARDANO_SOCKET_PATH"
LOG_DIR="$CARDANO_LOG_DIR"
UPDATE_CHECK="N"
EOF
}

#####################################################################
# Run the relay node in the background

runRelayNode () {

  effopts=(--config $CARDANO_CONFIG \
    --topology $CARDANO_TOPOLOGY \
    --database-path $CARDANO_DATABASE_PATH \
    --socket-path $CARDANO_SOCKET_PATH \
    --host-addr $CARDANO_BIND_ADDR \
    --port $CARDANO_PORT)

  effopts+=(${options[@]})
  effopts+=("+RTS" ${rtsopts[@]} "-RTS")

  echo "cardano-node run ${effopts[@]}"
  exec /usr/local/bin/cardano-node run "${effopts[@]}"
}

#####################################################################
# Run the block producer in the background

runBlockProducerNode () {

  effopts=(--config $CARDANO_CONFIG \
    --topology $CARDANO_TOPOLOGY \
    --database-path $CARDANO_DATABASE_PATH \
    --socket-path $CARDANO_SOCKET_PATH \
    --host-addr $CARDANO_BIND_ADDR \
    --port $CARDANO_PORT \
    --shelley-kes-key $CARDANO_SHELLEY_KES_KEY \
    --shelley-vrf-key $CARDANO_SHELLEY_VRF_KEY \
    --shelley-operational-certificate $CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE)

  effopts+=(${options[@]})
  effopts+=("+RTS" ${rtsopts[@]} "-RTS")

  echo "cardano-node run ${effopts[@]}"
  exec /usr/local/bin/cardano-node run "${effopts[@]}"
}

# Shift the first option by one index
shift

# Override default values with explicit options

options=($@)

for i in "${!options[@]}"
do
    j=$((i + 1))
    key=${options[i]}
    val=${options[j]}
    found=false

    # echo "$i/$j: ${key} ${val}"

    case ${key} in
      --config) CARDANO_CONFIG=${val}; found=true;;
      --topology) CARDANO_TOPOLOGY=${val}; found=true;;
      --database-path) CARDANO_DATABASE_PATH=${val}; found=true;;
      --socket-path) CARDANO_SOCKET_PATH=${val}; found=true;;
      --host-addr) CARDANO_BIND_ADDR=${val}; found=true;;
      --port) CARDANO_PORT=${val}; found=true;;
      --shelley-kes-key) CARDANO_SHELLEY_KES_KEY=${val}; found=true;;
      --shelley-vrf-key) CARDANO_SHELLEY_VRF_KEY=${val}; found=true;;
      --shelley-operational-certificate) CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=${val}; found=true;;
    esac

    if [[ $found == true ]]; then
      options[i]="";
      options[j]="";
    fi
done

# The IPC socket dir is not created on demand
mkdir -p `dirname $CARDANO_SOCKET_PATH`

# Removing a potentialy existing lost+found directory
rm -rf $CARDANO_DATABASE_PATH/lost+found

# Find the public IP when we run on Kubernetes
if [[ -z $CARDANO_PUBLIC_IP && -n $KUBERNETES_SERVICE_HOST ]]; then

  echo "Reading CARDANO_PUBLIC_IP from Kubernetes ..."

  # Accessing the Kubernetes API from a Pod
  # https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/#without-using-a-proxy

  SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
  if [[ -f ${SERVICEACCOUNT}/namespace && ${SERVICEACCOUNT}/token && ${SERVICEACCOUNT}/ca.crt ]]; then

    APISERVER=https://kubernetes.default.svc
    NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt

    AUTH_HEADER="Authorization: Bearer ${TOKEN}"

    POD_API_PATH="${APISERVER}/api/v1/namespaces/${NAMESPACE}/pods/${HOSTNAME}"
    NODE_NAME=$(curl -s --cacert ${CACERT} --header "${AUTH_HEADER}" -X GET ${POD_API_PATH} | jq -r ".spec.nodeName")

    if [[ -n ${NODE_NAME} ]]; then
      NODE_API_PATH="${APISERVER}/api/v1/nodes/$NODE_NAME"
      EXTERNAL_IP=$(curl -s --cacert ${CACERT} --header "${AUTH_HEADER}" -X GET ${NODE_API_PATH} | jq -r '.status.addresses[] | select(.type == "ExternalIP") | .address')
    fi

    echo "Kubernetes ${HOSTNAME} => ${NODE_NAME} => ${EXTERNAL_IP}"

    if [[ -n ${EXTERNAL_IP} ]]; then
      CARDANO_PUBLIC_IP=${EXTERNAL_IP}
    else
      echo "[Warning] Cannot obtain ExternalIP for: ${HOSTNAME}"
    fi

  else
    echo "[Warning] Cannot access the Pod's service account"
  fi
fi

# Read the RTS options into an array
read -ra rtsopts <<< ${CARDANO_RTS_OPTS}

printRunEnv
writeRootEnv

if [[ $CARDANO_UPDATE_TOPOLOGY == true ]]; then
  topologyUpdate -l &
fi

if [[ $CARDANO_BLOCK_PRODUCER == true ]]; then
  runBlockProducerNode
else
  runRelayNode
fi
